# -*- coding: utf-8 -*-
"""interface trusted

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LfYFn0cTnvESs4p4fU0_NosFHSZ0ibtr
"""

!pip install gradio

from google.colab import drive
drive.mount('/content/drive')

import cv2
from tensorflow.keras.models import load_model

loaded_model = load_model('/content/drive/MyDrive/resnet50_model_EX1.keras')
new_model = loaded_model

import gradio as gr
import cv2
import numpy as np


# Define class names
class_names = ['esophagitis', 'normal-cecum', 'normal-pylorus', 'normal-z-line', 'polyps', 'ulcerative-colitis']

# Function to resize the image
def resize_image(image, size=(224, 224)):
    return cv2.resize(image, size)

# Define a function for normalizing images
def normalize_image(img):
    # Convert the image to floating point format
    img = img.astype('float32')

    # Normalize the image by subtracting the mean and dividing by the standard deviation
    img -= np.mean(img)
    img /= np.std(img)

    return img

def predict_image(img):
    try:
        # Assuming 'img' is a numpy array representing the image
        img_resized = resize_image(img)
        img_normalized = normalize_image(img_resized)

        # Reshape the input to match the model's expected input shape
        img_normalized = img_normalized[np.newaxis, ...]

        # Predictions
        prediction = new_model.predict(img_normalized)[0]

        # Assuming you want to return the top 3 classes
        top_classes = np.argsort(prediction)[::-1][:3]

        result = {class_names[i]: float(prediction[i]) for i in top_classes}

        return result
    except Exception as e:
        print("Exception in predict_image:", e)
        import traceback
        traceback.print_exc()  # Print the full traceback
        raise  # Re-raise the exception to see the full traceback

# Create a Gradio interface
iface = gr.Interface(
    fn=predict_image,
    inputs=gr.Image(type="numpy", image_mode="RGB", label="Upload an image"),
    outputs=gr.Label(num_top_classes=3)
)

iface.launch(debug=True)

